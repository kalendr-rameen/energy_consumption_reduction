#!/usr/bin/env python
# coding: utf-8

# # –ó–∞–¥–∞—á–∞:
# 
# –ù–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–º–±–∏–Ω–∞—Ç–∞ –û–û–û ¬´–¢–∞–∫ –∑–∞–∫–∞–ª—è–µ–º —Å—Ç–∞–ª—å¬ª –ø—É—Ç—ë–º —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ —ç—Ç–∞–ø–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–ª–∏. –ù–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥—Å–∫–∞–∂–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Å—Ç–∞–ª–∏(–ø–æ—Å–ª–µ–¥–Ω—é—é).
# 
# –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–º –¥–∞—é—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∞–º–æ–≥–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞:
# 
# –°—Ç–∞–ª—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –≤ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–æ–º –∫–æ–≤—à–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é –æ–∫–æ–ª–æ 100 —Ç–æ–Ω–Ω. –ß—Ç–æ–±—ã –∫–æ–≤—à –≤—ã–¥–µ—Ä–∂–∏–≤–∞–ª –≤—ã—Å–æ–∫–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –∏–∑–Ω—É—Ç—Ä–∏ –µ–≥–æ –æ–±–ª–∏—Ü–æ–≤—ã–≤–∞—é—Ç –æ–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–º –∫–∏—Ä–ø–∏—á–æ–º. –†–∞—Å–ø–ª–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞–ª—å –∑–∞–ª–∏–≤–∞—é—Ç –≤ –∫–æ–≤—à –∏ –ø–æ–¥–æ–≥—Ä–µ–≤–∞—é—Ç –¥–æ –Ω—É–∂–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≥—Ä–∞—Ñ–∏—Ç–æ–≤—ã–º–∏ —ç–ª–µ–∫—Ç—Ä–æ–¥–∞–º–∏. –û–Ω–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –∫—Ä—ã—à–∫–µ –∫–æ–≤—à–∞. 
# 
# –ò–∑ —Å–ø–ª–∞–≤–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–µ—Ä–∞ (–¥–µ—Å—É–ª—å—Ñ—É—Ä–∞—Ü–∏—è), –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–∏–º–µ—Å–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è —Ö–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤ –∏ –æ—Ç–±–∏—Ä–∞—é—Ç—Å—è –ø—Ä–æ–±—ã. –°—Ç–∞–ª—å –ª–µ–≥–∏—Ä—É—é—Ç ‚Äî –∏–∑–º–µ–Ω—è—é—Ç –µ—ë —Å–æ—Å—Ç–∞–≤ ‚Äî –ø–æ–¥–∞–≤–∞—è –∫—É—Å–∫–∏ —Å–ø–ª–∞–≤–∞ –∏–∑ –±—É–Ω–∫–µ—Ä–∞ –¥–ª—è —Å—ã–ø—É—á–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–ª–∏ –ø—Ä–æ–≤–æ–ª–æ–∫—É —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–∞–π–±-–∞–ø–ø–∞—Ä–∞—Ç (–∞–Ω–≥–ª. tribe, ¬´–º–∞—Å—Å–∞¬ª).
# 
# –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ –ª–µ–≥–∏—Ä—É—é—â–∏–µ –¥–æ–±–∞–≤–∫–∏, –∏–∑–º–µ—Ä—è—é—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Å—Ç–∞–ª–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç –µ—ë —Ö–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑. –ü–æ—Ç–æ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–æ–≤—ã—à–∞—é—Ç, –¥–æ–±–∞–≤–ª—è—é—Ç –ª–µ–≥–∏—Ä—É—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –ø—Ä–æ–¥—É–≤–∞—é—Ç —Å–ø–ª–∞–≤ –∏–Ω–µ—Ä—Ç–Ω—ã–º –≥–∞–∑–æ–º. –ó–∞—Ç–µ–º –µ–≥–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—é—Ç –∏ —Å–Ω–æ–≤–∞ –ø—Ä–æ–≤–æ–¥—è—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è. –¢–∞–∫–æ–π —Ü–∏–∫–ª –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ –∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–ª–∞–≤–∫–∏.
# 
# –¢–æ–≥–¥–∞ —Ä–∞—Å–ø–ª–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ –¥–æ–≤–æ–¥–∫—É –º–µ—Ç–∞–ª–ª–∞ –∏–ª–∏ –ø–æ—Å—Ç—É–ø–∞–µ—Ç –≤ –º–∞—à–∏–Ω—É –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ä–∞–∑–ª–∏–≤–∫–∏. –û—Ç—Ç—É–¥–∞ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –≤—ã—Ö–æ–¥–∏—Ç –≤ –≤–∏–¥–µ –∑–∞–≥–æ—Ç–æ–≤–æ–∫-—Å–ª—è–±–æ–≤ (–∞–Ω–≥–ª. *slab*, ¬´–ø–ª–∏—Ç–∞¬ª).

# ## –û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö 
# –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è—Ç –∏–∑ —Ñ–∞–π–ª–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:
# 
# - `data_arc.csv` ‚Äî –¥–∞–Ω–Ω—ã–µ –æ–± —ç–ª–µ–∫—Ç—Ä–æ–¥–∞—Ö;
# - `data_bulk.csv` ‚Äî –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–∞—á–µ —Å—ã–ø—É—á–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–æ–±—ä—ë–º);
# - `data_bulk_time.csv` *‚Äî* –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–∞—á–µ —Å—ã–ø—É—á–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–≤—Ä–µ–º—è);
# - `data_gas.csv` ‚Äî –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–≤–∫–µ —Å–ø–ª–∞–≤–∞ –≥–∞–∑–æ–º;
# - `data_temp.csv` ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã;
# - `data_wire.csv` ‚Äî –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≤–æ–ª–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö (–æ–±—ä—ë–º);
# - `data_wire_time.csv` ‚Äî –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≤–æ–ª–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö (–≤—Ä–µ–º—è).

# ## –î–æ–ø.–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

# https://vulkantm.com/tehnologii/obrabotka-metalla-argonom-v-kovshe/
# 
# –†–∞–∑–≤–∏—Ç–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞–ª–µ–ø–ª–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –≤—ã–ø–ª–∞–≤–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤–Ω–µ–ø–µ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Ç–∞–ª–ª–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–∞–ª–µ–π. –í–Ω–µ–ø–µ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–ª–∞–≤–∞, –∞ –∏–º–µ–Ω–Ω–æ –¥–æ–Ω–Ω–∞—è –ø—Ä–æ–¥—É–≤–∫–∞ –º–µ—Ç–∞–ª–ª–∞ –∏–Ω–µ—Ä—Ç–Ω—ã–º–∏ –≥–∞–∑–∞–º–∏ ‚Äî –≤–∞–∂–Ω–æ–µ –∑–≤–µ–Ω–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Å—Ç–∞–ª–∏ –Ω–∞ —É—á–∞—Å—Ç–∫–µ –º–µ–∂–¥—É —Å—Ç–∞–ª–µ–ø–ª–∞–≤–∏–ª—å–Ω—ã–º –∞–≥—Ä–µ–≥–∞—Ç–æ–º –∏ —Ä–∞–∑–ª–∏–≤–∫–æ–π –º–µ—Ç–∞–ª–ª–∞. –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–æ–Ω–Ω–æ–π –ø—Ä–æ–¥—É–≤–∫–∏ –º–µ—Ç–∞–ª–ª–∞ –∏–Ω–µ—Ä—Ç–Ω—ã–º–∏ –≥–∞–∑–∞–º–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç:
# 
# 1.–ø–æ–≤—ã—Å–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞–ª–µ–ø–ª–∞–≤–∏–ª—å–Ω–æ–≥–æ –∞–≥—Ä–µ–≥–∞—Ç–∞ –∑–∞ —Å—á–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø—Ä–∏ –≤–Ω–µ–ø–µ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–ª–∏;
# 
# 
# 2.–ø–æ–≤—ã—Å–∏—Ç—å —á–∏—Å—Ç–æ—Ç—É —Å—Ç–∞–ª–∏ –ø–æ –Ω–µ–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–º –≤–∫–ª—é—á–µ–Ω–∏—è–º;
# 
# 
# 3.–æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –¥–µ–≥–∞–∑–∞—Ü–∏—é –º–µ—Ç–∞–ª–ª–∞;
# 
# 4.—Å–æ–∑–¥–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
# 
# 
# –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –ø—Ä–æ–¥—É–≤–∫–∞ –º–µ—Ç–∞–ª–ª–∞ –∏–Ω–µ—Ä—Ç–Ω—ã–º–∏ –≥–∞–∑–∞–º–∏, —á–µ—Ä–µ–∑ –¥–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–≤–æ—á–Ω—ã–µ –ø—Ä–æ–±–∫–∏ –∏ —É–∑–ª—ã, —è–≤–ª—è–µ—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–∑–ª–∏–≤–∞–µ–º–æ–π —Å—Ç–∞–ª–∏ –∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –∫–æ–≤—à–µ–≤–æ–π –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏–∏ (–≥–æ–º–æ–≥–µ–Ω–∏–∑–∞—Ü–∏—è, —Ä–∞—Ñ–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–µ–≥–∞–∑–∞—Ü–∏—è).

# ![povyshenie-kachestva-stali.jpg](attachment:povyshenie-kachestva-stali.jpg)

# <font color='steelblue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ç–∏–º–ª–∏–¥–∞</b></font><br>
# <font color='green'>‚úîÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—Ç–µ üëçüèº</font><br>

# In[1]:


import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.model_selection import cross_val_score
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import GridSearchCV
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import ShuffleSplit
from lightgbm import LGBMRegressor
from catboost import CatBoostRegressor
import lightgbm as lgb


# In[3]:


electrode_data = pd.read_csv('./final_steel/data_arc.csv')
bulk_materials_volume = pd.read_csv('./final_steel/data_bulk.csv')
bulk_materials_time = pd.read_csv('./final_steel/data_bulk_time.csv')
alloy_blow_data = pd.read_csv('./final_steel/data_gas.csv')
temperature_data = pd.read_csv('./final_steel/data_temp.csv')
wire_material_volume = pd.read_csv('./final_steel/data_wire.csv')
wire_material_time = pd.read_csv('./final_steel/data_wire_time.csv')


# # --------------------------------------------------------

# # 1. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö 

# ## 1.1 –î–∞–Ω–Ω—ã–µ –æ–± —ç–ª–µ–∫—Ç—Ä–æ–¥–∞—Ö

# In[5]:


electrode_data.info()


# In[6]:


electrode_data.head()


# ## 1.2 –î–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–∞—á–µ —Å—ã–ø—É—á–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤

# In[7]:


bulk_materials_time.info()


# In[8]:


bulk_materials_time.head()


# In[9]:


bulk_materials_volume.info()


# In[10]:


bulk_materials_volume.head()


# ## 1.3 –î–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–∞—á–µ –≥–∞–∑–∞

# In[11]:


alloy_blow_data.info()


# In[12]:


alloy_blow_data.head()


# ## 1.4 –î–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ

# In[13]:


temperature_data.info()


# In[14]:


temperature_data.head()


# ## –î–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–∞—á–µ –ø—Ä–æ–≤–æ–ª–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤

# In[15]:


wire_material_time.info()


# In[16]:


wire_material_time.head()


# In[17]:


wire_material_volume.info()


# In[18]:


wire_material_volume.head()


# # 2. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö 

# In[19]:


electrode_data['–ö–æ–Ω–µ—Ü –Ω–∞–≥—Ä–µ–≤–∞ –¥—É–≥–æ–π'] = pd.to_datetime(electrode_data['–ö–æ–Ω–µ—Ü –Ω–∞–≥—Ä–µ–≤–∞ –¥—É–≥–æ–π'].astype(str),                                                        format='%Y-%m-%d %H:%M:%S')


# In[20]:


temperature_data['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'] = pd.to_datetime(temperature_data['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].astype(str),                                                   format='%Y-%m-%d %H:%M:%S')


# In[21]:


temperature_data.loc[temperature_data.groupby('key')['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].idxmin()]['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].plot.box()
print(temperature_data.loc[temperature_data.groupby('key')['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].idxmin()]['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].describe())


# In[22]:


temperature_data.loc[temperature_data.groupby('key')['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].idxmax()]['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].plot.box()
print(temperature_data.loc[temperature_data.groupby('key')['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].idxmax()]['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].describe())


# **–í–∏–¥–Ω–æ, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–∞–º–µ—Ä–æ–≤ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è (2477 vs 3216), –ø–æ—Å–º–æ—Ç—Ä–∏–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ**

# In[23]:


a = set(temperature_data.iloc[list(temperature_data.loc[temperature_data.groupby('key')['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].                                                        idxmin()]['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].index)].key)


# In[24]:


len(a)


# In[25]:


temperature_data.loc[temperature_data.groupby('key')['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].                                                        idxmax()]['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞']


# In[26]:


b = set(temperature_data.iloc[list(temperature_data.loc[temperature_data.groupby('key')['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].                                                        idxmax()]['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].dropna().index)].key)


# In[27]:


len(b)


# **–ü–æ–ª—É—á–∏–ª —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ–ª–æ–Ω–∫–∏ key, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏—Å—É—Ç—Å–≤—É–µ—Ç NaN-—ã, –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–µ –æ—à–∏–±–∫–∏ –ª–∏ —ç—Ç–æ –≤ –ø—Ä–∏–±–æ—Ä–∞—Ö —Å–∞–º–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã** 

# In[28]:


set(a) - set(b)


# **–í–æ–∑—å–º—ë–º –∫ –ø—Ä–∏–º–µ—Ä—É –∑–Ω–∞—á–µ–Ω–∏–µ key=2516, –∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ**

# In[29]:


bulk_materials_volume[bulk_materials_volume['key'] == 2516]


# In[30]:


bulk_materials_time[bulk_materials_time['key'] == 2516]


# In[31]:


wire_material_time[wire_material_time['key'] == 2516]


# In[32]:


wire_material_volume[wire_material_volume['key'] == 2516]


# In[33]:


temperature_data[temperature_data['key'] == 2516]


# In[34]:


electrode_data[electrode_data['key'] == 2516]


# **–í–∏–¥–Ω–æ —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ä–æ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã(4 —É—á–∏—Ç—ã–≤–∞—è NaN) –≤–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å—É–º–º–∞—Ä–Ω—ã–º –∫–æ–ª-–≤–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–π —Å—ã–ø—É—á–∏—Ö –∏ –ø—Ä–æ–≤–æ–ª–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (4+2), –Ω—É –∏ –ø—Ä–æ—Å—Ç–æ –≤–∏–¥–Ω–æ —á—Ç–æ –æ—Ç—Å—É—Ç—Å–≤—É—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–º–µ—Ä–æ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (NaN), —á—Ç–æ –Ω–∞–≤–æ–¥–∏—Ç –Ω–∞ –º—ã—Å–ª—å —á—Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ –±–∏—Ç—ã–µ –∏–Ω–∞—á–µ –∫–∞–∫ –æ–±—å—è—Å–Ω–∏—Ç—å –ø–æ—á–µ–º—É –¥–∞–∂–µ –∫–æ–ª-–≤–æ –∑–∞–º–µ—Ä–æ–≤(4 —Å NaN), –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –Ω—É –ª–∏–±–æ –∂–µ –ø—Ä–æ—Å—Ç–æ —Å–ª–æ–º–∞–ª—Å—è –ø—Ä–∏–±–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã(—Ö–æ—Ç—è –ø–µ—Ä–≤—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –æ–Ω –≤—Å–µ–≥–¥–∞ –∑–∞–º–µ—Ä—è–µ—Ç??). –í–æ–æ–±—â–µ–º —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –¥–∞–Ω–Ω—ã–µ –±–∏—Ç—ã–µ**  

# **–ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ '–Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ' –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–ª-–≤–æ –∑–∞–º–µ—Ä–æ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª-–≤–æ–º –∑–Ω–∞—á–µ–Ω–∏–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã**

# In[35]:


a = temperature_data.groupby(by='key').count()


# In[36]:


a[a['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'] == a['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞']]


# **–ò –∫–æ–ª-–≤–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (2477) —Å–æ–≤–ø–∞–ª–æ —Å –∫–æ–ª-–≤–æ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–º–µ—Ä–æ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, —á—Ç–æ –≤–∏–¥–∏–º–æ –µ—â–µ –Ω–∞—Å –Ω–∞—Ç–∞–ª–∫–∏–≤–∞–µ—Ç –Ω–∞ –º—ã—Å–ª—å —á—Ç–æ –Ω—É–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –ª–∏—à—å —Å —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –∞ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≥–¥–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤—Ä–µ–º—è –∑–∞–º–µ—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –Ω–æ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç —Å–∞–º–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –æ—Ç–±—Ä–æ—Å–∏—Ç—å!**

# In[37]:


temperature_data = temperature_data[temperature_data['key'].isin([x for x in range(1,2500)])] 


# In[38]:


temperature_data.loc[temperature_data.groupby('key')['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].idxmax()]['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].plot.box()
print(temperature_data.loc[temperature_data.groupby('key')['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].idxmax()]['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].describe())


# In[39]:


temperature_data.loc[temperature_data.groupby('key')['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].idxmin()]['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].plot.box()
print(temperature_data.loc[temperature_data.groupby('key')['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].idxmin()]['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].describe())


# **–ó–∞–¥–∂–æ–∏–Ω–∏–º –¥–≤–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º –µ—Å—Ç—å –ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –∫–ª—é—á–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –∏ —á—Ç–æ –≤ —ç—Ç–∏—Ö –∫–ª—é—á–∞—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ**

# In[40]:


a = electrode_data.merge(bulk_materials_time, on='key', how='right').key.unique()


# In[41]:


b = electrode_data.merge(bulk_materials_time, on='key', how='outer').key.unique()


# In[42]:


no_bulk_add = (set(b) - set(a))


# In[43]:


len(list(set(b) - set(a)))


# **–î–∞–≤–∞–π—Ç–µ –ø–æ–ª—É—á—à–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –¥–∞–Ω–Ω—É—é –∞–Ω–æ–º–∞–ª–∏—é**

# In[44]:


electrode_data[electrode_data['key'] == 51]


# In[45]:


temperature_data[temperature_data['key'] == 51]


# In[46]:


bulk_materials_time[bulk_materials_time['key'] == 51]


# In[47]:


wire_material_time[wire_material_time['key'] == 51]


# **–ü–æ–ª—É—á–∞–µ—Ç—Å—è –¥–æ–≤–æ–ª—å–Ω–æ —Å—Ç—Ä–∞–Ω–Ω–æ —á—Ç–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–ª–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –Ω–∏ —Å—ã–ø—É—á–∏–µ –Ω–µ –ø—Ä–æ–≤–æ–ª–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Å—É–¥—è –ø–æ —Ç–∞–±–ª–∏—Ü–µ, —Å—Ç—Ä–∞–Ω–Ω–æ..... –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∏ –ø—Ä–æ–≤–æ–ª–æ–∫–∏ –Ω–∏ —Å—É–ø—É—á–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤**

# In[48]:


a = electrode_data.merge(wire_material_time, on='key', how='right').key.unique()


# In[49]:


b = electrode_data.merge(wire_material_time, on='key', how='outer').key.unique()


# In[50]:


no_wire_add = set(b) - set(a)


# In[51]:


no_wire_add.intersection(no_bulk_add)


# **–£–±–∏—Ä–∞–µ–º —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã temperature_data(–ü–æ—á–µ–º—É –æ—Ç—Å—é–¥–∞ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å–ø—Ä–æ—Å–∏—Ç–µ –≤—ã, –Ω–æ –ø–∞—Ä—É —Å—Ç—Ä–æ–∫ –Ω–∞–∑–∞–¥ —è —É–¥–∞–ª–∏–ª –∑–Ω–∞—á–µ–Ω–∏—è key –∏–∑ —ç—Ç–æ–π –∂–µ —Ç–∞–±–ª–∏—Ü—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–ª-–≤–æ –∑–∞–º–µ—Ä–æ–≤ –∏ –∫–æ–ª-–≤–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–∞–ª–∏, –ø–æ—ç—Ç–æ–º—É –ø–æ–ª—É—á–∞–µ—Ç—Å—è —á—Ç–æ –≤ —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è '—Ö–æ—Ä–æ—à–∏–π' –∑–Ω–∞—á–µ–Ω–∏—è key, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç –Ω–∞—Å)**

# In[52]:


temperature_data = temperature_data[~temperature_data['key'].isin(no_wire_add.intersection(no_bulk_add))]


# # –ü–ª–∞–Ω —Ä–∞–±–æ—Ç—ã 
# 
# –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–≤–æ–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–ø–∏—Å–∞–Ω—ã –≤ –ø—É–Ω–∫—Ç–µ "–ü–ª–∞–Ω —Ä–∞–±–æ—Ç—ã v3", –ø–æ—ç—Ç–æ–º—É –ø–æ—Å—Ç–æ—Ä–∞—é—Å—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞—Ç—å –ø–ª–∞–Ω —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã:
# 
# * –í–∫—Ä–∞—Ç—Ü–µ –æ–ø–∏—à—É –¥–∞—Ç–∞—Å–µ—Ç, –∫–∞–∫–∏–µ –±—ã–ª–∏ –ø—Ä–µ–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–ª—è —á–µ–≥–æ –æ–Ω–∏
# 
# * –û–ø–∏—à—É –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞ –∏ –∫ –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã —è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –¥–ª—è —ç—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∞ —Ç–∞–∫–∂–µ –∫–∞–∫–∏–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∞–Ω–æ–º–∞–º–∞–ª–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –¥–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –∫–∞–∫ —Å –Ω–∏–º–∏ —è –ø–æ—Å—Ç—É–ø–∞–ª, —á—Ç–æ–±—ã –ø—Ä–∏–≤–µ—Å—Ç–∏ –¥–∞—Ç–∞—Å–µ—Ç –≤ –ª–æ–≥–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.
# 
# * –ó–∞—Ç–µ–º –æ–ø–∏—à—É –ø—Ä–æ features_engineering, –∞ –∏–º–µ–Ω–Ω–æ –∫–∞–∫–∏–µ –Ω–æ–≤—ã–µ —Ñ–∏—á–∏ —è —Å–æ–∑–¥–∞–ª(–°—É–º–º–∞—Ä–Ω—ã–π –æ–±—å–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å—ã–ø—É—á–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ –∫–ª—é—á—É' '–°—É–º–º–∞—Ä–Ω—ã–π –æ–±—å–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–æ–ª–æ—á–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ –∫–ª—é—á—É','—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏') –∏ –æ–ø–∏—à—É –∑–∞—á–µ–º —è —ç—Ç–æ —Å–¥–µ–ª–∞–ª
# 
# * –°–æ–∑–¥–∞–ª –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –æ–±—å–µ–¥–∏–Ω–µ–Ω–Ω—É—é –ø–æ –∫–ª—é—á–∞–º –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, –≥–¥–µ –∫–∞–∂–æ–º—É –∫–ª—é—á—É –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç–≤–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ–∏—á–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –ø—Ä–µ–¥.–ø—É–Ω–∫—Ç–µ –∞ —Ç–∞–∫–∂–µ –ø–µ—Ä–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–∞—Ä–≥–µ—Ç–∞.
# 
# * –û–ø–∏—à—É –∫–∞–∫–∏–µ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —è –∏—Å–ø–æ–ª—å–∑—É—é, –æ–ø–∏—à—É –∫–∞–∫–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏(–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ Grid_search) –∏ –∫–∞–∫—É—é –∏–º–µ–Ω–Ω–æ —è –≤—ã–±—Ä–∞–ª –∏—Ç–æ–≥–æ–≤—É—é –º–æ–¥–µ–ª—å –ø–æ—Å–ª–µ –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏, –æ–ø–∏—à—É —á—Ç–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ü–µ–ª–µ–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏ –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MAE, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –∏ –±—É–¥–µ—Ç –æ—Ç–±–∏—Ä–∞—Ç—å—Å—è —Å–∞–º–∞—è –ª—É—á—à–∞—è –º–æ–¥–µ–ª—å
# 
# * –û–ø–∏—à—É –∫–∞–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã(–º–µ—Ç—Ä–∏–∫–∞ MAE) –º–æ–¥–µ–ª–µ–π –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤—ã–±–æ—Ä–∫–∞—Ö 

# **–ù–æ–≤—ã–π –ø–ª–∞–Ω —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–Ω—Ü–µ**

# ## 2.1 –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –ø–µ—Ä–≤—ã–º –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∑–∞–º–µ—Ä–æ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã

# In[53]:


min_time_temp_measure = temperature_data.loc[temperature_data.groupby('key')['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].idxmin()]['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].reset_index(drop=True)


# In[54]:


max_time_temp_measure = temperature_data.loc[temperature_data.groupby('key')['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].idxmax()]['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].reset_index(drop=True)


# <font color='steelblue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ç–∏–º–ª–∏–¥–∞</b></font><br>
# <font color='darkorange'>‚ö†Ô∏è min –∏ max ‚Äî —Ñ—É–Ω–∫—Ü–∏–∏ Python, –Ω–µ –Ω—É–∂–Ω–æ –∏—Ö –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å, –ø—Ä–∏–¥—É–º–∞–π –¥—Ä—É–≥–∏–µ –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º.</font>

# ‚úîÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ

# In[55]:


min_time_temp_measure.index = list(temperature_data.key.unique())
max_time_temp_measure.index = list(temperature_data.key.unique())


# In[56]:


(max_time_temp_measure - min_time_temp_measure).astype('timedelta64[s]').plot.box()
(max_time_temp_measure - min_time_temp_measure).astype('timedelta64[s]').describe()


# In[57]:


max_time_temp_measure


# In[58]:


diff_time = ((max_time_temp_measure - min_time_temp_measure).astype('timedelta64[s]'))


# In[59]:


diff_time[diff_time > 4500]


# In[60]:


electrode_data[electrode_data['key'] == 44]


# In[61]:


wire_material_time[wire_material_time['key'] == 44]


# In[62]:


bulk_materials_time[bulk_materials_time['key'] == 44]


# In[63]:


temperature_data[temperature_data['key'] == 44]


# ## 2.2 –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–≥—Ä–µ–≤–∞ —ç–ª–µ–∫—Ç—Ä–æ–¥–∞–º–∏, —Ç–æ –µ—Å—Ç—å —Å—É–º–º—É –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –≤—Å–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞–º –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏ –Ω–∞–≥—Ä–µ–≤–∞ —ç–ª–µ–∫—Ç—Ä–æ–¥–æ–≤.

# In[64]:


electrode_data = electrode_data.loc[electrode_data['key'].isin(temperature_data.key)]


# In[65]:


electrode_data['–ù–∞—á–∞–ª–æ –Ω–∞–≥—Ä–µ–≤–∞ –¥—É–≥–æ–π'] = pd.to_datetime(electrode_data['–ù–∞—á–∞–ª–æ –Ω–∞–≥—Ä–µ–≤–∞ –¥—É–≥–æ–π'].astype(str),                                                        format='%Y-%m-%d %H:%M:%S')


# In[66]:


electrode_data['diff'] = (electrode_data['–ö–æ–Ω–µ—Ü –Ω–∞–≥—Ä–µ–≤–∞ –¥—É–≥–æ–π'] - electrode_data['–ù–∞—á–∞–ª–æ –Ω–∞–≥—Ä–µ–≤–∞ –¥—É–≥–æ–π']).astype('timedelta64[s]')


# In[67]:


electrode_data.groupby('key').sum()['diff']


# In[68]:


electrode_data.groupby('key').sum()['diff'].plot.box()
electrode_data.groupby('key').sum()['diff'].describe()


# ## 2.3 –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –Ω–∞–≥—Ä–µ–≤–∞ —ç–ª–µ–∫—Ç—Ä–æ–¥–∞–º–∏

# In[69]:


electrode_data.groupby('key').count()['–ê–∫—Ç–∏–≤–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å']


# In[70]:


electrode_data.groupby('key').count()['–ê–∫—Ç–∏–≤–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å'].plot.box()
electrode_data.groupby('key').count()['–ê–∫—Ç–∏–≤–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å'].describe()


# ## 2.4 –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏.

# In[71]:


electrode_data['proportion'] = electrode_data['–ê–∫—Ç–∏–≤–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å']/electrode_data['–†–µ–∞–∫—Ç–∏–≤–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å']


# In[72]:


electrode_data['proportion'].plot.box()
electrode_data['proportion'].describe()


# In[73]:


electrode_data.corr()


# In[74]:


pd.plotting.scatter_matrix(electrode_data)


# In[75]:


pd.plotting.scatter_matrix(temperature_data)


# In[76]:


temperature_data.loc[temperature_data.groupby('key')['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].idxmax()]['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].plot.box()
print(temperature_data.loc[temperature_data.groupby('key')['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].idxmax()]['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].describe())


# In[77]:


temperature_data.loc[temperature_data.groupby('key')['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].idxmin()]['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].plot.box()
print(temperature_data.loc[temperature_data.groupby('key')['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].idxmin()]['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].describe())


# ## 2.5 –ü–æ—Å–º–æ—Ç—Ä–∏–º –∫–∞–∫ –≤ —Å—Ä–µ–¥–Ω–µ–º –º–µ–Ω—è–µ—Ç—Å—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≥–æ –∏–ª–∏ –∏–Ω–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞ 

# In[78]:


only_wire_add_key = [x for x in no_bulk_add if x not in no_bulk_add.intersection(no_wire_add)]


# In[79]:


only_bulk_add_key = [x for x in no_wire_add if x not in no_bulk_add.intersection(no_wire_add)]


# In[80]:


only_bulk_add_temp = temperature_data[temperature_data['key'].isin(only_bulk_add_key)]


# In[81]:


only_wire_add_temp = temperature_data[temperature_data['key'].isin(only_wire_add_key)]


# In[82]:


only_bulk_add_temp


# In[83]:


only_wire_add_temp


# In[84]:


diff_only_bulk = (only_bulk_add_temp.loc[only_bulk_add_temp.groupby('key')['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].idxmax()]['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].reset_index(drop=True) - only_bulk_add_temp.loc[only_bulk_add_temp.groupby('key')['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].idxmin()]['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].reset_index(drop=True))


# In[85]:


diff_only_wire = (only_wire_add_temp.loc[only_wire_add_temp.groupby('key')['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].idxmax()]['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].reset_index(drop=True) - only_wire_add_temp.loc[only_wire_add_temp.groupby('key')['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].idxmin()]['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].reset_index(drop=True))


# In[86]:


diff_only_bulk.plot.box()
diff_only_bulk.describe()


# In[87]:


diff_only_wire.plot.box()
diff_only_wire.describe()


# In[88]:


electrode_data


# **–ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –∫–æ–ª–æ–Ω–∫—É diff –≤ diff_seconds –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏**

# In[89]:


electrode_data.rename(columns={'diff':'diff_seconds'}, inplace=True)


# In[90]:


electrode_data


# **–°–æ–∑–¥–∞–¥–∏–º —Ñ–∏—á—É electricity –∫–∞–∫ –º–µ—Ç—Ä–∏–∫—É –æ—Ç—Ä–∞–∂–∞—é—â—É—é –≤—Ä–µ–º—è –∏ —ç–Ω–µ—Ä–≥–∏—é –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é –Ω–∞ –Ω–∞–≥—Ä–µ–≤ —Å–º–µ—Å–∏** 

# In[91]:


electrode_data['electricity'] = (electrode_data['–ê–∫—Ç–∏–≤–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å']**2)+(electrode_data['–†–µ–∞–∫—Ç–∏–≤–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å']**2)


# In[92]:


electrode_data['electricity'] = electrode_data['electricity']**0.5


# In[93]:


electrode_data['electricity'] = electrode_data['electricity'] * electrode_data['diff_seconds']


# In[94]:


electrode_data


# In[95]:


electrode_data.groupby('key').mean()


# In[96]:


temperature_data.groupby('key').mean()


# In[97]:


electrode_data['–†–µ–∞–∫—Ç–∏–≤–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å'].plot.box()
electrode_data['–†–µ–∞–∫—Ç–∏–≤–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å'].describe()


# **–ù–∞—à–ª–∏ –∞–Ω–æ–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏, —É–±–µ—Ä–µ–º –µ–≥–æ**

# In[98]:


electrode_data[electrode_data['–†–µ–∞–∫—Ç–∏–≤–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å'] < 0]


# In[99]:


list(electrode_data[electrode_data['key'] == 2116].index)


# In[100]:


electrode_data.describe()


# In[101]:


electrode_data.drop(list(electrode_data[electrode_data['key'] == 2116].index), inplace=True)


# In[102]:


electrode_data.describe()


# ## –û–±—å–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è  

# In[103]:


wire_material_volume.fillna(0.0, inplace=True)


# In[104]:


bulk_materials_volume.fillna(0.0, inplace=True)


# In[105]:


electrode_data.groupby('key')['electricity'].sum()


# In[106]:


electodes = electrode_data.groupby('key')['electricity'].sum().to_frame()


# In[107]:


electodes = electodes.reset_index()


# In[108]:


electodes


# In[109]:


#a = electrode_data.merge(bulk_materials_time, on='key', how='right')


# In[110]:


final_df = electodes.merge(wire_material_volume, on='key', how='left')


# In[111]:


final_df = final_df.merge(bulk_materials_volume, on='key', how='left')


# In[112]:


final_df = final_df.merge(temperature_data.loc[temperature_data.groupby('key')['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].idxmin()],                          on='key', how='left')


# In[113]:


final_df = final_df.merge(temperature_data.loc[temperature_data.groupby('key')['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞'].idxmax()],                          on='key', how='left')


# In[114]:


final_df


# In[115]:


final_df.info()


# In[116]:


final_df.dropna(inplace=True)


# In[117]:


final_df.info()


# In[118]:


final_df = final_df.drop(['–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞_x','–í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞_y'], axis=1)


# In[119]:


final_df


# In[120]:


final_df['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_y'].plot.hist()
final_df['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_y'].describe()


# In[121]:


final_df


# In[122]:


final_df.info()


# In[123]:


final_df = final_df.merge(alloy_blow_data, on='key', how='left')


# In[124]:


final_df.dropna(inplace=True)


# In[125]:


final_df.info()


# In[126]:


final_df.corr()


# In[127]:


final_df = final_df.drop('Wire 5', axis=1)


# # Linear_regression

# In[128]:


x = final_df.drop(['key','–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_y'], axis=1)


# In[129]:


y = final_df['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_y']


# In[130]:


X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=12345)


# In[131]:


cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=22)


# In[132]:


lin_reg = LinearRegression()


# In[133]:


lin_reg.fit(X_train, y_train)


# In[134]:


cv_lin_reg = cross_val_score(lin_reg, X_train, y_train, cv=cv, scoring='neg_mean_absolute_error')
cv_lin_reg.mean()*(-1)


# ## DecisionTreeRegression

# In[135]:


# Hyper parameters range intialization for tuning 

parameters={"splitter":["best"],
            "max_depth" : [11,15,20,25,30,35,40],
           "min_samples_leaf":[1,2,3,4,5,6,7,8,9,10],
           "max_leaf_nodes":[None,10,20,30,40,50,60,70,80,90] }


# In[136]:


reg_decision_model=DecisionTreeRegressor(criterion='absolute_error', random_state=12345)


# In[140]:


tuning_model=GridSearchCV(reg_decision_model,param_grid=parameters,scoring='neg_mean_absolute_error',cv=cv,verbose=3)


# In[141]:


tuning_model.fit(X_train,y_train)


# In[142]:


tuning_model.best_score_


# In[143]:


tuning_model.best_params_


# ## Random Forest

# In[144]:


parametrs = { 'n_estimators': [500, 1000],
              'max_depth': range (1, 31, 10),
              'min_samples_split': [2, 4, 8]}


# In[145]:


forest = GridSearchCV(RandomForestRegressor(random_state=22), 
                      param_grid=parametrs, scoring='neg_mean_absolute_error', cv=cv)


# In[146]:


forest.fit(X_train,y_train)


# In[147]:


forest.best_params_


# In[148]:


forest.best_score_*(-1)


# ## LGBM

# In[149]:


parameters = {'max_depth': [2, 4, 6],
              'learning_rate': [0.01, 0.03, 0.1],
              'n_estimators': [100, 200, 500, 1000]}


# In[150]:


lgbm = LGBMRegressor(random_state=22)


# In[151]:


grid_cv = GridSearchCV(lgbm, parameters, scoring='neg_mean_absolute_error', cv=cv)


# In[152]:


grid_cv.fit(X_train,y_train)


# In[153]:


grid_cv.best_score_*(-1)


# In[154]:


grid_cv.best_params_


# ## Catboost

# In[155]:


parameters = {'max_depth': [2, 4, 8, 10],
              'learning_rate': [0.01, 0.03, 0.1],
              'l2_leaf_reg': [1, 3, 5],
              'iterations': [50, 100, 200]
             }


# In[156]:


catboost = CatBoostRegressor(loss_function='MAE', random_state=22)


# In[157]:


grid_search_result = catboost.grid_search(parameters, X=X_train, y=y_train, cv=cv, verbose=0, plot=True)


# In[158]:


catboost.get_params()


# In[159]:


catboost.get_best_score()


# In[160]:


d = {'model' : ["linear regression", 'Decision Tree Regressor', 'Random Forest', 'LGBM', 'Catboost'],
     'CV_MAE' : [6.652, 6.963, 6.194, 6.181, 5.543]}
df_total = pd.DataFrame(data=d)


# In[161]:


df_total


# –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç—ã –º—ã –≤—ã—è—Å–Ω–∏–ª–∏, —á—Ç–æ –∑–∞–∫–∞–∑—á–∏–∫—É —Å–ª–µ–¥—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –º–æ–¥–µ–ª—å `CatBoostRegressor` –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å—Ç–∞–ª–∏, —á—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —É–º–µ–Ω—å—à–µ–Ω–∏—é –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é.

# **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞**
# 
# –•–æ—Ä–æ—à–æ –≤—Å–µ –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ—Å—Ç–æ—Ä–∞–ª—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –∞ —Ç–µ–ø–µ—Ä—å –ø–æ—Å–∫–æ–ª—å–∫—É —Å–∞–º–∞—è –ª—É—á—à–∞—è –º–µ—Ç—Ä–∏–∫–∞ —É –Ω–∞—Å –ø–æ–ª—É—á–∏–ª–∞—Å—å –Ω–∞ –º–æ–¥–µ–ª–∏ Catboost, –ø–æ—Å–º–æ—Ç—Ä–∏–º –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –∑–Ω–∞—á–µ–Ω–∏—è MAE —É –Ω–∞—Å –ø–æ–ª—É—á–∞—Ç—Å—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ

# In[162]:


mean_absolute_error(y_test,catboost.predict(X_test))


# –ú–æ–¥–µ–ª—å `CatBoostRegressor` –ø–æ–∫–∞–∑–∞–ª–∞ —Ç–æ—á–Ω–æ—Å—Ç—å –≤ 6.23 –≥—Ä–∞–¥—É—Å–æ–≤ –ø–æ –º–µ—Ç—Ä–∏–∫–µ –ú–ê–ï –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–π –º–µ–Ω–µ–µ —á–µ–º –Ω–∞ 7 –≥—Ä–∞–¥—É—Å–æ–≤.

# # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç

# **–í–æ–ø—Ä–æ—Å**: –ö–∞–∫–∏–µ –ø—É–Ω–∫—Ç—ã –ø–ª–∞–Ω–∞ –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∞ –∫–∞–∫–∏–µ ‚Äî –Ω–µ—Ç (–ø–æ—è—Å–Ω–∏—Ç–µ –ø–æ—á–µ–º—É)?<br>
# **–û—Ç–≤–µ—Ç**: –í —Ü–µ–ª–æ–º —Å–º–æ—Ç—Ä—è –Ω–∞ —Å–≤–æ–π –ø–ª–∞–Ω, —è –æ—Å—É—â–µ—Å—Ç–≤–∏–ª –≤—Å–µ –ø—É–Ω–∫—Ç—ã —Å–≤–æ–µ–≥–æ –ø–ª–∞–Ω–∞, –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ö–æ—Ç–µ–ª —Å–¥–µ–ª–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –Ω–æ–≤—ã—Ö —Ñ–∏—á–µ–π(–Ω–∞–ø—Ä.—Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª-–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–æ–ª–æ—á–Ω–æ–≥–æ/—Å—ã–ø—á–∞—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞), –Ω–æ –ø–æ–∑–∂–µ –ø–µ—Ä–µ–¥—É–º–∞–ª, –ø–æ—Å–∫–æ–ª—å–∫—É –∫–∞–∫ –º–Ω–µ –ø–æ–∫–∞–∑–∞–ª–æ—Å—å —á—Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —É –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –±—É–¥–µ—Ç —Å–≤–æ—è —Ç—É–≥–æ–ø–ª–∞–≤–∫–æ—Å—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –∏—Å—Ö–æ–¥ –º–æ–¥–µ–ª–∏.<br>
# **–í–æ–ø—Ä–æ—Å**:–ö–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —à–∞–≥–∏ –≤ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤—ã–¥–µ–ª–∏–ª–∏?<br>
# **–û—Ç–≤–µ—Ç**: –ö–ª—é—á–µ–≤—ã–º —ç—Ç–∞–ø–æ–º –∫–∞–∫ –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è —Ä–µ—à–µ–Ω–∏—è –ª—é–±–æ–π –∑–∞–¥–∞—á–∏ —è–≤–ª—è–µ—Ç—Å—è —ç—Ç–∞–ø —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–∫–æ–ª—å–∫—É –æ—Ç –Ω–µ–≥–æ –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –Ω–∞ —Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å–ø–æ –¥–µ—Ñ–æ–ª—Ç—É(–ê –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —ç—Ç–æ —Ç–æ —á—Ç–æ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–∏ —Å –æ—Ç—Å—É—Ç—Å–≤—É—é—â–∏–º–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º–∏ –∏ –∫–ª—é—á–∏ –≥–¥–µ –æ—Ç—Å—É—Ç–≤–æ–≤–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–∫–∏—Ö –ª–∏–±–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤). –ò –ª–∏—à—å –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —ç—Ç–∞–ø–∞ –±—É–¥—É—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —ç—Ç–∞–ø—ã —Ç–∞–∫–∏–µ –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∏—á–µ–π –∏ –ø–æ–¥–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏ –µ–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. 
